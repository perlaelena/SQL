#Show Customers (their full names, customer ID, and country) who are not in the US. 
SELECT customerId, FirstName, LastName, Country
FROM chinook.customers
WHERE Country <> "US";

#Show only the Customers from Brazil.
SELECT customerId, FirstName, LastName, Country
FROM chinook.customers
WHERE Country = "Brazil";

#Find the Invoices of customers who are from Brazil. 
SELECT customers.FirstName, customers.LastName, invoices.InvoiceID, invoices.InvoiceDate, invoices.BillingCountry
FROM chinook.customers
LEFT OUTER JOIN chinook.invoices
ON customers.CustomerId = invoices.CustomerId
WHERE customers.Country = "Brazil";

#Show the Employees who are Sales Agents.
SELECT employees.FirstName, employees.LastName, Title
FROM chinook.employees
WHERE Title = "Sales Support Agent";

#Find a unique/distinct list of billing countries from the Invoice table.
SELECT DISTINCT BillingCountry
FROM chinook.invoices;

#Provide a query that shows the invoices associated with each sales agent.
SELECT invoices.InvoiceId, employees.FirstName, employees.LastName
FROM chinook.invoices
JOIN chinook.customers
ON invoices.customerId = customers.customerId
INNER JOIN chinook.employees
ON customers.SupportRepId = employees.EmployeeId;

#Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.
SELECT invoices.Total, customers.FirstName AS customer_firstName, customers.LastName AS customer_lastName, customers.Country, employees.FirstName AS employee_firstName, employees.LastName AS employee_lastName 
FROM chinook.invoices
LEFT OUTER JOIN chinook.customers
ON invoices.customerId = customers.customerId
LEFT OUTER JOIN chinook.employees
ON customers.SupportRepId = employees.EmployeeId;

#How many Invoices were there in 2009?
SELECT COUNT(InvoiceId) AS invoices_2009
FROM chinook.invoices
WHERE InvoiceDate LIKE '%2009%';

#What are the total sales for 2009?
SELECT SUM(Total)
FROM chinook.invoices
WHERE InvoiceDate LIKE '%2009%';

#Write a query that includes the purchased track name with each invoice line ID.
SELECT invoice_items.InvoiceLineId, tracks.Name
FROM chinook.invoice_items
LEFT OUTER JOIN chinook.tracks
ON tracks.TrackId = invoice_items.TrackId;

#Write a query that includes the purchased track name AND artist name with each invoice line ID.
SELECT invoice_items.InvoiceLineId, tracks.Name AS track_name, artists.Name AS artist_name
FROM chinook.invoice_items
JOIN chinook.tracks
ON invoice_items.TrackId = tracks.TrackId
JOIN chinook.albums
ON albums.AlbumId = tracks.AlbumId
JOIN chinook.artists
ON albums.ArtistId = artists.ArtistId
ORDER BY InvoiceLineId;

#Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.
SELECT tracks.Name as track_name, albums.Title as album_title, media_types.Name as media_type, genres.Name as genre_name
FROM chinook.tracks
JOIN chinook.media_types
ON tracks.MediaTypeId = media_types.MediaTypeId
JOIN chinook.genres
ON Genres.GenreId = tracks.GenreId
JOIN chinook.albums
ON albums.AlbumId = tracks.Albumid
JOIN chinook.artists
ON albums.ArtistId = artists.ArtistId;

#Show the total sales made by each sales agent.
SELECT distinct employees.EmployeeId, employees.FirstName, employees.LastName, SUM(invoices.Total) 
OVER (PARTITION BY employees.EmployeeId) as "total_sales"
FROM chinook.invoices
JOIN chinook.customers
ON invoices.customerId = customers.customerId
JOIN chinook.employees
ON customers.SupportRepId = employees.EmployeeId
WHERE Title = "Sales Support Agent";

#Which sales agent made the most dollars in sales in 2009?
SELECT distinct employees.EmployeeId, employees.FirstName, employees.LastName, SUM(invoices.Total) 
OVER (PARTITION BY employees.EmployeeId) as "total_sales"
FROM chinook.invoices
JOIN chinook.customers
ON invoices.customerId = customers.customerId
JOIN chinook.employees
ON customers.SupportRepId = employees.EmployeeId
WHERE Title = "Sales Support Agent" AND invoices.InvoiceDate LIKE '%2009%'
ORDER BY SUM(invoices.Total) 
OVER (PARTITION BY employees.EmployeeId) desc
LIMIT 1;

#How many of tracks are in each playlist?
SELECT playlists.Name, COUNT(playlist_track.TrackId) 
FROM Chinook.playlist_track
JOIN chinook.playlists
ON playlist_track.PlaylistId = playlists.PlaylistId
GROUP BY playlists.Name
ORDER BY Name;

#What is the popularity of each playlist?
SELECT playlists.Name, COUNT(playlist_track.TrackId),
CASE
    WHEN COUNT(playlist_track.TrackId) >2000 THEN "very popular"
    WHEN COUNT(playlist_track.TrackId) >1000 THEN "popular"
    WHEN COUNT(playlist_track.TrackId) >400 THEN "somewhat popular"
    ELSE "not popular"
END AS "Popularity"
FROM Chinook.playlist_track
JOIN chinook.playlists
ON playlist_track.PlaylistId = playlists.PlaylistId
GROUP BY playlists.Name
ORDER BY COUNT(playlist_track.TrackId) DESC;

#When was each employee hired starting with the most recent?
SELECT e.EmployeeId, e.FirstName, e.LastName, e.Title, e.HireDate
FROM chinook.employees e
ORDER BY e.HireDate desc;

#What tracks are in the Classical playlists?
SELECT tracks.Name, playlists.Name
FROM chinook.tracks 
INNER JOIN chinook.playlist_track
ON playlist_track.TrackId = tracks.TrackId
INNER JOIN chinook.playlists
ON playlists.PlaylistId = playlist_track.PlaylistId
WHERE playlists.Name LIKE '%Classical%'
GROUP BY tracks.Name;

